/*
 * generated by Xtext
 */
package com.incquerylabs.uml.ralf.serializer;

import com.google.inject.Inject;
import com.incquerylabs.uml.ralf.services.ReducedAlfLanguageGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ReducedAlfLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ReducedAlfLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_ParenthesizedExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ReducedAlfLanguageGrammarAccess) access;
		match_ParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_ParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getMultiplicityIndicatorRule())
			return getMultiplicityIndicatorToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getReclassifyAllClauseRule())
			return getReclassifyAllClauseToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * MultiplicityIndicator : 
	 *     '[' ']'
	 * ;
	 */
	protected String getMultiplicityIndicatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[]";
	}
	
	/**
	 * ReclassifyAllClause : 
	 *     'from' '*'
	 * ;
	 */
	protected String getReclassifyAllClauseToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "from*";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_ParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_ParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_ParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '[' (ambiguity) '(' type=TypeDeclaration
	 *     (rule start) '[' (ambiguity) 'new' instance=[Classifier|QualifiedName]
	 *     (rule start) '[' (ambiguity) 'null' ']' (rule start)
	 *     (rule start) '[' (ambiguity) 'super' '.' target=[Operation|QualifiedName]
	 *     (rule start) '[' (ambiguity) 'super' tuple=Tuple
	 *     (rule start) '[' (ambiguity) 'this' ']' (rule start)
	 *     (rule start) '[' (ambiguity) 'this' tuple=Tuple
	 *     (rule start) '[' (ambiguity) '{' '}' ']' (rule start)
	 *     (rule start) '[' (ambiguity) '{' elements=ExpressionList
	 *     (rule start) '[' (ambiguity) association=[Association|QualifiedName]
	 *     (rule start) '[' (ambiguity) class=[Class|QualifiedName]
	 *     (rule start) '[' (ambiguity) collectionType=CollectionType
	 *     (rule start) '[' (ambiguity) leftHandSide=LeftHandSide
	 *     (rule start) '[' (ambiguity) operand=LeftHandSide
	 *     (rule start) '[' (ambiguity) operator='!'
	 *     (rule start) '[' (ambiguity) operator='$'
	 *     (rule start) '[' (ambiguity) operator='~'
	 *     (rule start) '[' (ambiguity) operator=AffixOperator
	 *     (rule start) '[' (ambiguity) operator=NumericUnaryOperator
	 *     (rule start) '[' (ambiguity) reference=[NamedElement|QualifiedName]
	 *     (rule start) '[' (ambiguity) value='*'
	 *     (rule start) '[' (ambiguity) value=BOOLEAN_VALUE
	 *     (rule start) '[' (ambiguity) value=NATURAL_VALUE
	 *     (rule start) '[' (ambiguity) value=REAL_VALUE
	 *     (rule start) '[' (ambiguity) value=STRING
	 *     (rule start) '[' (ambiguity) {ArithmeticExpression.operand1=}
	 *     (rule start) '[' (ambiguity) {AssociationAccessExpression.context=}
	 *     (rule start) '[' (ambiguity) {ClassificationExpression.operand=}
	 *     (rule start) '[' (ambiguity) {ConditionalLogicalExpression.operand1=}
	 *     (rule start) '[' (ambiguity) {ConditionalTestExpression.operand1=}
	 *     (rule start) '[' (ambiguity) {EqualityExpression.operand1=}
	 *     (rule start) '[' (ambiguity) {FeatureInvocationExpression.context=}
	 *     (rule start) '[' (ambiguity) {LogicalExpression.operand1=}
	 *     (rule start) '[' (ambiguity) {PropertyAccessExpression.context=}
	 *     (rule start) '[' (ambiguity) {RelationalExpression.operand1=}
	 *     (rule start) '[' (ambiguity) {SequenceAccessExpression.primary=}
	 *     (rule start) '[' (ambiguity) {ShiftExpression.operand1=}
	 *     (rule start) 'case' (ambiguity) '(' type=TypeDeclaration
	 *     (rule start) 'case' (ambiguity) 'new' instance=[Classifier|QualifiedName]
	 *     (rule start) 'case' (ambiguity) 'null' ':' (rule start)
	 *     (rule start) 'case' (ambiguity) 'super' '.' target=[Operation|QualifiedName]
	 *     (rule start) 'case' (ambiguity) 'super' tuple=Tuple
	 *     (rule start) 'case' (ambiguity) 'this' ':' (rule start)
	 *     (rule start) 'case' (ambiguity) 'this' tuple=Tuple
	 *     (rule start) 'case' (ambiguity) '{' '}' ':' (rule start)
	 *     (rule start) 'case' (ambiguity) '{' elements=ExpressionList
	 *     (rule start) 'case' (ambiguity) association=[Association|QualifiedName]
	 *     (rule start) 'case' (ambiguity) class=[Class|QualifiedName]
	 *     (rule start) 'case' (ambiguity) collectionType=CollectionType
	 *     (rule start) 'case' (ambiguity) leftHandSide=LeftHandSide
	 *     (rule start) 'case' (ambiguity) operand=LeftHandSide
	 *     (rule start) 'case' (ambiguity) operator='!'
	 *     (rule start) 'case' (ambiguity) operator='$'
	 *     (rule start) 'case' (ambiguity) operator='~'
	 *     (rule start) 'case' (ambiguity) operator=AffixOperator
	 *     (rule start) 'case' (ambiguity) operator=NumericUnaryOperator
	 *     (rule start) 'case' (ambiguity) reference=[NamedElement|QualifiedName]
	 *     (rule start) 'case' (ambiguity) value='*'
	 *     (rule start) 'case' (ambiguity) value=BOOLEAN_VALUE
	 *     (rule start) 'case' (ambiguity) value=NATURAL_VALUE
	 *     (rule start) 'case' (ambiguity) value=REAL_VALUE
	 *     (rule start) 'case' (ambiguity) value=STRING
	 *     (rule start) 'case' (ambiguity) {ArithmeticExpression.operand1=}
	 *     (rule start) 'case' (ambiguity) {AssociationAccessExpression.context=}
	 *     (rule start) 'case' (ambiguity) {ClassificationExpression.operand=}
	 *     (rule start) 'case' (ambiguity) {ConditionalLogicalExpression.operand1=}
	 *     (rule start) 'case' (ambiguity) {ConditionalTestExpression.operand1=}
	 *     (rule start) 'case' (ambiguity) {EqualityExpression.operand1=}
	 *     (rule start) 'case' (ambiguity) {FeatureInvocationExpression.context=}
	 *     (rule start) 'case' (ambiguity) {LogicalExpression.operand1=}
	 *     (rule start) 'case' (ambiguity) {PropertyAccessExpression.context=}
	 *     (rule start) 'case' (ambiguity) {RelationalExpression.operand1=}
	 *     (rule start) 'case' (ambiguity) {SequenceAccessExpression.primary=}
	 *     (rule start) 'case' (ambiguity) {ShiftExpression.operand1=}
	 *     (rule start) (ambiguity) '(' type=TypeDeclaration
	 *     (rule start) (ambiguity) 'new' instance=[Classifier|QualifiedName]
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) 'super' '.' target=[Operation|QualifiedName]
	 *     (rule start) (ambiguity) 'super' tuple=Tuple
	 *     (rule start) (ambiguity) 'this' (rule start)
	 *     (rule start) (ambiguity) 'this' tuple=Tuple
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' elements=ExpressionList
	 *     (rule start) (ambiguity) association=[Association|QualifiedName]
	 *     (rule start) (ambiguity) class=[Class|QualifiedName]
	 *     (rule start) (ambiguity) collectionType=CollectionType
	 *     (rule start) (ambiguity) leftHandSide=LeftHandSide
	 *     (rule start) (ambiguity) operand=LeftHandSide
	 *     (rule start) (ambiguity) operator='!'
	 *     (rule start) (ambiguity) operator='$'
	 *     (rule start) (ambiguity) operator='~'
	 *     (rule start) (ambiguity) operator=AffixOperator
	 *     (rule start) (ambiguity) operator=NumericUnaryOperator
	 *     (rule start) (ambiguity) reference=[NamedElement|QualifiedName]
	 *     (rule start) (ambiguity) value='*'
	 *     (rule start) (ambiguity) value=BOOLEAN_VALUE
	 *     (rule start) (ambiguity) value=NATURAL_VALUE
	 *     (rule start) (ambiguity) value=REAL_VALUE
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {ArithmeticExpression.operand1=}
	 *     (rule start) (ambiguity) {AssociationAccessExpression.context=}
	 *     (rule start) (ambiguity) {ClassificationExpression.operand=}
	 *     (rule start) (ambiguity) {ConditionalLogicalExpression.operand1=}
	 *     (rule start) (ambiguity) {ConditionalTestExpression.operand1=}
	 *     (rule start) (ambiguity) {EqualityExpression.operand1=}
	 *     (rule start) (ambiguity) {FeatureInvocationExpression.context=}
	 *     (rule start) (ambiguity) {LogicalExpression.operand1=}
	 *     (rule start) (ambiguity) {PropertyAccessExpression.context=}
	 *     (rule start) (ambiguity) {RelationalExpression.operand1=}
	 *     (rule start) (ambiguity) {SequenceAccessExpression.primary=}
	 *     (rule start) (ambiguity) {ShiftExpression.operand1=}
	 */
	protected void emit_ParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' type=TypeDeclaration
	 *     (rule start) (ambiguity) 'new' instance=[Classifier|QualifiedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) 'super' '.' target=[Operation|QualifiedName]
	 *     (rule start) (ambiguity) 'super' tuple=Tuple
	 *     (rule start) (ambiguity) 'this' ')' (rule start)
	 *     (rule start) (ambiguity) 'this' tuple=Tuple
	 *     (rule start) (ambiguity) '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '{' elements=ExpressionList
	 *     (rule start) (ambiguity) association=[Association|QualifiedName]
	 *     (rule start) (ambiguity) class=[Class|QualifiedName]
	 *     (rule start) (ambiguity) collectionType=CollectionType
	 *     (rule start) (ambiguity) leftHandSide=LeftHandSide
	 *     (rule start) (ambiguity) operand=LeftHandSide
	 *     (rule start) (ambiguity) operator='!'
	 *     (rule start) (ambiguity) operator='$'
	 *     (rule start) (ambiguity) operator='~'
	 *     (rule start) (ambiguity) operator=AffixOperator
	 *     (rule start) (ambiguity) operator=NumericUnaryOperator
	 *     (rule start) (ambiguity) reference=[NamedElement|QualifiedName]
	 *     (rule start) (ambiguity) value='*'
	 *     (rule start) (ambiguity) value=BOOLEAN_VALUE
	 *     (rule start) (ambiguity) value=NATURAL_VALUE
	 *     (rule start) (ambiguity) value=REAL_VALUE
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {ArithmeticExpression.operand1=}
	 *     (rule start) (ambiguity) {AssociationAccessExpression.context=}
	 *     (rule start) (ambiguity) {ClassificationExpression.operand=}
	 *     (rule start) (ambiguity) {ConditionalLogicalExpression.operand1=}
	 *     (rule start) (ambiguity) {ConditionalTestExpression.operand1=}
	 *     (rule start) (ambiguity) {EqualityExpression.operand1=}
	 *     (rule start) (ambiguity) {FeatureInvocationExpression.context=}
	 *     (rule start) (ambiguity) {LogicalExpression.operand1=}
	 *     (rule start) (ambiguity) {PropertyAccessExpression.context=}
	 *     (rule start) (ambiguity) {RelationalExpression.operand1=}
	 *     (rule start) (ambiguity) {SequenceAccessExpression.primary=}
	 *     (rule start) (ambiguity) {ShiftExpression.operand1=}
	 */
	protected void emit_ParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
