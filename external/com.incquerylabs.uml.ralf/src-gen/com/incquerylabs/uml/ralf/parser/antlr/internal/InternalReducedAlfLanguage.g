/*
 * generated by Xtext
 */
grammar InternalReducedAlfLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package com.incquerylabs.uml.ralf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.incquerylabs.uml.ralf.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.incquerylabs.uml.ralf.services.ReducedAlfLanguageGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private ReducedAlfLanguageGrammarAccess grammarAccess;
 	
    public InternalReducedAlfLanguageParser(TokenStream input, ReducedAlfLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Statements";	
   	}
   	
   	@Override
   	protected ReducedAlfLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	 iv_ruleStatements=ruleStatements 
	 { $current=$iv_ruleStatements.current; } 
	 EOF 
;

// Rule Statements
ruleStatements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementsAccess().getStatementStatementParserRuleCall_0()); 
	    }
		lv_statement_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementsRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_UNRESTRICTED_NAME_1=RULE_UNRESTRICTED_NAME    {
		$current.merge(this_UNRESTRICTED_NAME_1);
    }

    { 
    newLeafNode(this_UNRESTRICTED_NAME_1, grammarAccess.getNameAccess().getUNRESTRICTED_NAMETerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_0()); 
    }
    this_Name_0=ruleName    {
		$current.merge(this_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_1_1()); 
    }
    this_Name_2=ruleName    {
		$current.merge(this_Name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
    }
    this_AssignmentExpression_0=ruleAssignmentExpression
    { 
        $current = $this_AssignmentExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall_1()); 
    }
    this_ConditionalExpression_1=ruleConditionalExpression
    { 
        $current = $this_ConditionalExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBaseExpressionParserRuleCall_0()); 
    }
    this_BaseExpression_0=ruleBaseExpression
    { 
        $current = $this_BaseExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPrimaryExpressionAccess().getFeatureInvocationExpressionContextAction_1_0_0(),
            $current);
    }
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_1_0_1_0());
    }

    |(
(
		lv_isStatic_3_0=	'::' 
    {
        newLeafNode(lv_isStatic_3_0, grammarAccess.getPrimaryExpressionAccess().getIsStaticColonColonKeyword_1_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "isStatic", true, "::");
	    }

)
))(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOperationOperationCrossReference_1_0_2_0()); 
	    }
		ruleName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParametersTupleParserRuleCall_1_0_3_0()); 
	    }
		lv_parameters_5_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPrimaryExpressionAccess().getPropertyAccessExpressionContextAction_1_1_0(),
            $current);
    }
)	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_1_1_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPropertyPropertyCrossReference_1_1_2_0()); 
	    }
		ruleName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPrimaryExpressionAccess().getAssociationAccessExpressionContextAction_1_2_0(),
            $current);
    }
)	otherlv_10='->' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPrimaryExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_2_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAssociationPropertyCrossReference_1_2_2_0()); 
	    }
		ruleName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPrimaryExpressionAccess().getSequenceAccessExpressionPrimaryAction_1_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIndexIndexParserRuleCall_1_3_1_0()); 
	    }
		lv_index_13_0=ruleIndex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_13_0, 
        		"Index");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleBaseExpression
entryRuleBaseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseExpressionRule()); }
	 iv_ruleBaseExpression=ruleBaseExpression 
	 { $current=$iv_ruleBaseExpression.current; } 
	 EOF 
;

// Rule BaseExpression
ruleBaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getLiteralExpressionParserRuleCall_0()); 
    }
    this_LiteralExpression_0=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getCollectionLiteralExpressionParserRuleCall_1()); 
    }
    this_CollectionLiteralExpression_1=ruleCollectionLiteralExpression
    { 
        $current = $this_CollectionLiteralExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getThisExpressionParserRuleCall_2()); 
    }
    this_ThisExpression_2=ruleThisExpression
    { 
        $current = $this_ThisExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getSuperInvocationExpressionParserRuleCall_3()); 
    }
    this_SuperInvocationExpression_3=ruleSuperInvocationExpression
    { 
        $current = $this_SuperInvocationExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getInstanceCreationOrSequenceConstructionExpressionParserRuleCall_4()); 
    }
    this_InstanceCreationOrSequenceConstructionExpression_4=ruleInstanceCreationOrSequenceConstructionExpression
    { 
        $current = $this_InstanceCreationOrSequenceConstructionExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getClassExtentExpressionParserRuleCall_5()); 
    }
    this_ClassExtentExpression_5=ruleClassExtentExpression
    { 
        $current = $this_ClassExtentExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getLinkOperationExpressionParserRuleCall_6()); 
    }
    this_LinkOperationExpression_6=ruleLinkOperationExpression
    { 
        $current = $this_LinkOperationExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getNullExpressionParserRuleCall_7()); 
    }
    this_NullExpression_7=ruleNullExpression
    { 
        $current = $this_NullExpression_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getNameExpressionParserRuleCall_8()); 
    }
    this_NameExpression_8=ruleNameExpression
    { 
        $current = $this_NameExpression_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getParenthesizedExpressionParserRuleCall_9()); 
    }
    this_ParenthesizedExpression_9=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionParserRuleCall_0()); 
    }
    this_BooleanLiteralExpression_0=ruleBooleanLiteralExpression
    { 
        $current = $this_BooleanLiteralExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getNaturalLiteralExpressionParserRuleCall_1()); 
    }
    this_NaturalLiteralExpression_1=ruleNaturalLiteralExpression
    { 
        $current = $this_NaturalLiteralExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getRealLiteralExpressionParserRuleCall_2()); 
    }
    this_RealLiteralExpression_2=ruleRealLiteralExpression
    { 
        $current = $this_RealLiteralExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getUnboundedLiteralExpressionParserRuleCall_3()); 
    }
    this_UnboundedLiteralExpression_3=ruleUnboundedLiteralExpression
    { 
        $current = $this_UnboundedLiteralExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionParserRuleCall_4()); 
    }
    this_StringLiteralExpression_4=ruleStringLiteralExpression
    { 
        $current = $this_StringLiteralExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanLiteralExpression
entryRuleBooleanLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralExpressionRule()); }
	 iv_ruleBooleanLiteralExpression=ruleBooleanLiteralExpression 
	 { $current=$iv_ruleBooleanLiteralExpression.current; } 
	 EOF 
;

// Rule BooleanLiteralExpression
ruleBooleanLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN_VALUE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralExpressionAccess().getValueBOOLEAN_VALUETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN_VALUE");
	    }

)
)
;





// Entry rule entryRuleNaturalLiteralExpression
entryRuleNaturalLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNaturalLiteralExpressionRule()); }
	 iv_ruleNaturalLiteralExpression=ruleNaturalLiteralExpression 
	 { $current=$iv_ruleNaturalLiteralExpression.current; } 
	 EOF 
;

// Rule NaturalLiteralExpression
ruleNaturalLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_NATURAL_VALUE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNaturalLiteralExpressionAccess().getValueNATURAL_VALUETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNaturalLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NATURAL_VALUE");
	    }

)
)
;





// Entry rule entryRuleRealLiteralExpression
entryRuleRealLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealLiteralExpressionRule()); }
	 iv_ruleRealLiteralExpression=ruleRealLiteralExpression 
	 { $current=$iv_ruleRealLiteralExpression.current; } 
	 EOF 
;

// Rule RealLiteralExpression
ruleRealLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_REAL_VALUE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getRealLiteralExpressionAccess().getValueREAL_VALUETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"REAL_VALUE");
	    }

)
)
;





// Entry rule entryRuleUnboundedLiteralExpression
entryRuleUnboundedLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnboundedLiteralExpressionRule()); }
	 iv_ruleUnboundedLiteralExpression=ruleUnboundedLiteralExpression 
	 { $current=$iv_ruleUnboundedLiteralExpression.current; } 
	 EOF 
;

// Rule UnboundedLiteralExpression
ruleUnboundedLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnboundedLiteralExpressionAccess().getUnboundedLiteralExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=	'*' 
    {
        newLeafNode(lv_value_1_0, grammarAccess.getUnboundedLiteralExpressionAccess().getValueAsteriskKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnboundedLiteralExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_0, "*");
	    }

)
))
;





// Entry rule entryRuleStringLiteralExpression
entryRuleStringLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralExpressionRule()); }
	 iv_ruleStringLiteralExpression=ruleStringLiteralExpression 
	 { $current=$iv_ruleStringLiteralExpression.current; } 
	 EOF 
;

// Rule StringLiteralExpression
ruleStringLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNameExpression
entryRuleNameExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameExpressionRule()); }
	 iv_ruleNameExpression=ruleNameExpression 
	 { $current=$iv_ruleNameExpression.current; } 
	 EOF 
;

// Rule NameExpression
ruleNameExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNameExpressionAccess().getReferenceNamedElementCrossReference_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleThisExpression
entryRuleThisExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThisExpressionRule()); }
	 iv_ruleThisExpression=ruleThisExpression 
	 { $current=$iv_ruleThisExpression.current; } 
	 EOF 
;

// Rule ThisExpression
ruleThisExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getThisExpressionAccess().getFeatureInvocationExpressionAction_0_0(),
            $current);
    }
)	otherlv_1='this' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getThisExpressionAccess().getThisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThisExpressionAccess().getTupleTupleParserRuleCall_0_2_0()); 
	    }
		lv_tuple_2_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThisExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_2_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getThisExpressionAccess().getThisExpressionAction_1_0(),
            $current);
    }
)	otherlv_4='this' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getThisExpressionAccess().getThisKeyword_1_1());
    }
))
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRulePropertyAccessExpression
entryRulePropertyAccessExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyAccessExpressionRule()); }
	 iv_rulePropertyAccessExpression=rulePropertyAccessExpression 
	 { $current=$iv_rulePropertyAccessExpression.current; } 
	 EOF 
;

// Rule PropertyAccessExpression
rulePropertyAccessExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccessExpressionAccess().getContextPrimaryExpressionParserRuleCall_0_0()); 
	    }
		lv_context_0_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyAccessExpressionRule());
	        }
       		set(
       			$current, 
       			"context",
        		lv_context_0_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccessExpressionAccess().getFullStopKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyAccessExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccessExpressionAccess().getPropertyPropertyCrossReference_2_0()); 
	    }
		ruleName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleRule()); }
	 iv_ruleTuple=ruleTuple 
	 { $current=$iv_ruleTuple.current; } 
	 EOF 
;

// Rule Tuple
ruleTuple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleAccess().getExpressionListAction_0_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleAccess().getLeftParenthesisKeyword_0_1());
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTupleAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleAccess().getLeftParenthesisKeyword_1_0());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTupleAccess().getNamedTupleExpressionListParserRuleCall_1_1_0()); 
    }
    this_NamedTupleExpressionList_4=ruleNamedTupleExpressionList
    { 
        $current = $this_NamedTupleExpressionList_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTupleAccess().getExpressionListParserRuleCall_1_1_1()); 
    }
    this_ExpressionList_5=ruleExpressionList
    { 
        $current = $this_ExpressionList_5.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTupleAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionListAccess().getExpressionListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_0_0()); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleNamedTupleExpressionList
entryRuleNamedTupleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedTupleExpressionListRule()); }
	 iv_ruleNamedTupleExpressionList=ruleNamedTupleExpressionList 
	 { $current=$iv_ruleNamedTupleExpressionList.current; } 
	 EOF 
;

// Rule NamedTupleExpressionList
ruleNamedTupleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedTupleExpressionListAccess().getExpressionsNamedExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleNamedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedTupleExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"NamedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedTupleExpressionListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedTupleExpressionListAccess().getExpressionsNamedExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleNamedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedTupleExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"NamedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNamedExpression
entryRuleNamedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedExpressionRule()); }
	 iv_ruleNamedExpression=ruleNamedExpression 
	 { $current=$iv_ruleNamedExpression.current; } 
	 EOF 
;

// Rule NamedExpression
ruleNamedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedExpressionAccess().getNameNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedExpressionAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSuperInvocationExpression
entryRuleSuperInvocationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuperInvocationExpressionRule()); }
	 iv_ruleSuperInvocationExpression=ruleSuperInvocationExpression 
	 { $current=$iv_ruleSuperInvocationExpression.current; } 
	 EOF 
;

// Rule SuperInvocationExpression
ruleSuperInvocationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSuperInvocationExpressionAccess().getSuperKeyword_0());
    }
(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSuperInvocationExpressionAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuperInvocationExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSuperInvocationExpressionAccess().getTargetOperationCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSuperInvocationExpressionAccess().getTupleTupleParserRuleCall_2_0()); 
	    }
		lv_tuple_3_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperInvocationExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_3_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInstanceCreationOrSequenceConstructionExpression
entryRuleInstanceCreationOrSequenceConstructionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceCreationOrSequenceConstructionExpressionRule()); }
	 iv_ruleInstanceCreationOrSequenceConstructionExpression=ruleInstanceCreationOrSequenceConstructionExpression 
	 { $current=$iv_ruleInstanceCreationOrSequenceConstructionExpression.current; } 
	 EOF 
;

// Rule InstanceCreationOrSequenceConstructionExpression
ruleInstanceCreationOrSequenceConstructionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInstanceCreationOrSequenceConstructionExpressionAccess().getInstanceCreationExpressionAction_0(),
            $current);
    }
)	otherlv_1='new' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceCreationOrSequenceConstructionExpressionAccess().getNewKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceCreationOrSequenceConstructionExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationOrSequenceConstructionExpressionAccess().getInstanceClassifierCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceCreationOrSequenceConstructionExpressionAccess().getTupleTupleParserRuleCall_3_0()); 
	    }
		lv_tuple_3_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceCreationOrSequenceConstructionExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_3_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLinkOperationExpression
entryRuleLinkOperationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkOperationExpressionRule()); }
	 iv_ruleLinkOperationExpression=ruleLinkOperationExpression 
	 { $current=$iv_ruleLinkOperationExpression.current; } 
	 EOF 
;

// Rule LinkOperationExpression
ruleLinkOperationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkOperationExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationExpressionAccess().getAssociationAssociationCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinkOperationExpressionAccess().getColonColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationExpressionAccess().getOperationLinkOperationEnumRuleCall_2_0()); 
	    }
		lv_operation_2_0=ruleLinkOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkOperationExpressionRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_2_0, 
        		"LinkOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkOperationExpressionAccess().getTupleTupleParserRuleCall_3_0()); 
	    }
		lv_tuple_3_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkOperationExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_3_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleClassExtentExpression
entryRuleClassExtentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassExtentExpressionRule()); }
	 iv_ruleClassExtentExpression=ruleClassExtentExpression 
	 { $current=$iv_ruleClassExtentExpression.current; } 
	 EOF 
;

// Rule ClassExtentExpression
ruleClassExtentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassExtentExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassExtentExpressionAccess().getClassClassCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassExtentExpressionAccess().getColonColonKeyword_1());
    }
	otherlv_2='instances' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassExtentExpressionAccess().getInstancesKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassExtentExpressionAccess().getLeftParenthesisKeyword_3());
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassExtentExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullExpressionRule()); }
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current; } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullExpressionAccess().getNullExpressionAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullExpressionAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleCollectionLiteralExpression
entryRuleCollectionLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionLiteralExpressionRule()); }
	 iv_ruleCollectionLiteralExpression=ruleCollectionLiteralExpression 
	 { $current=$iv_ruleCollectionLiteralExpression.current; } 
	 EOF 
;

// Rule CollectionLiteralExpression
ruleCollectionLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCollectionLiteralExpressionAccess().getElementCollectionExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionLiteralExpressionAccess().getCollectionTypeCollectionTypeEnumRuleCall_1_0_0()); 
	    }
		lv_collectionType_1_0=ruleCollectionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"collectionType",
        		lv_collectionType_1_0, 
        		"CollectionType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCollectionLiteralExpressionAccess().getLessThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionLiteralExpressionAccess().getTypeDeclarationTypeDeclarationParserRuleCall_1_2_0()); 
	    }
		lv_typeDeclaration_3_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"typeDeclaration",
        		lv_typeDeclaration_3_0, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCollectionLiteralExpressionAccess().getGreaterThanSignKeyword_1_3());
    }
)?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCollectionLiteralExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionLiteralExpressionAccess().getElementsExpressionListParserRuleCall_3_0()); 
	    }
		lv_elements_6_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"elements",
        		lv_elements_6_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCollectionLiteralExpressionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeTypeCrossReference_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIndex
entryRuleIndex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	 iv_ruleIndex=ruleIndex 
	 { $current=$iv_ruleIndex.current; } 
	 EOF 
;

// Rule Index
ruleIndex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIndexAccess().getLeftSquareBracketKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIndexAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIndexAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRulePrefixExpression
entryRulePrefixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixExpressionRule()); }
	 iv_rulePrefixExpression=rulePrefixExpression 
	 { $current=$iv_rulePrefixExpression.current; } 
	 EOF 
;

// Rule PrefixExpression
rulePrefixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixExpressionAccess().getPrefixExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExpressionAccess().getOperatorAffixOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleAffixOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"AffixOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExpressionAccess().getOperandLeftHandSideParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleLeftHandSide		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"LeftHandSide");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPostfixOrCastExpressionParserRuleCall_0()); 
    }
    this_PostfixOrCastExpression_0=rulePostfixOrCastExpression
    { 
        $current = $this_PostfixOrCastExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getNonPostfixNonCastUnaryExpressionParserRuleCall_1()); 
    }
    this_NonPostfixNonCastUnaryExpression_1=ruleNonPostfixNonCastUnaryExpression
    { 
        $current = $this_NonPostfixNonCastUnaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPrefixExpressionParserRuleCall_2()); 
    }
    this_PrefixExpression_2=rulePrefixExpression
    { 
        $current = $this_PrefixExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePostfixOrCastExpression
entryRulePostfixOrCastExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixOrCastExpressionRule()); }
	 iv_rulePostfixOrCastExpression=rulePostfixOrCastExpression 
	 { $current=$iv_rulePostfixOrCastExpression.current; } 
	 EOF 
;

// Rule PostfixOrCastExpression
rulePostfixOrCastExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPostfixOrCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
    }
    this_PostfixExpression_0=rulePostfixExpression
    { 
        $current = $this_PostfixExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPostfixOrCastExpressionAccess().getCastExpressionParserRuleCall_1()); 
    }
    this_CastExpression_1=ruleCastExpression
    { 
        $current = $this_CastExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPostfixOrCastExpressionAccess().getPrimaryExpressionParserRuleCall_2()); 
    }
    this_PrimaryExpression_2=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	 iv_rulePostfixExpression=rulePostfixExpression 
	 { $current=$iv_rulePostfixExpression.current; } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPostfixExpressionAccess().getPostfixExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOperandLeftHandSideParserRuleCall_1_0()); 
	    }
		lv_operand_1_0=ruleLeftHandSide		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_0, 
        		"LeftHandSide");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOperatorAffixOperatorEnumRuleCall_2_0()); 
	    }
		lv_operator_2_0=ruleAffixOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AffixOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNonPostfixNonCastUnaryExpression
entryRuleNonPostfixNonCastUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonPostfixNonCastUnaryExpressionRule()); }
	 iv_ruleNonPostfixNonCastUnaryExpression=ruleNonPostfixNonCastUnaryExpression 
	 { $current=$iv_ruleNonPostfixNonCastUnaryExpression.current; } 
	 EOF 
;

// Rule NonPostfixNonCastUnaryExpression
ruleNonPostfixNonCastUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNonPostfixNonCastUnaryExpressionAccess().getNumericUnaryExpressionParserRuleCall_0()); 
    }
    this_NumericUnaryExpression_0=ruleNumericUnaryExpression
    { 
        $current = $this_NumericUnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNonPostfixNonCastUnaryExpressionAccess().getBooleanUnaryExpressionParserRuleCall_1()); 
    }
    this_BooleanUnaryExpression_1=ruleBooleanUnaryExpression
    { 
        $current = $this_BooleanUnaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNonPostfixNonCastUnaryExpressionAccess().getBitStringUnaryExpressionParserRuleCall_2()); 
    }
    this_BitStringUnaryExpression_2=ruleBitStringUnaryExpression
    { 
        $current = $this_BitStringUnaryExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNonPostfixNonCastUnaryExpressionAccess().getIsolationExpressionParserRuleCall_3()); 
    }
    this_IsolationExpression_3=ruleIsolationExpression
    { 
        $current = $this_IsolationExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanUnaryExpression
entryRuleBooleanUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanUnaryExpressionRule()); }
	 iv_ruleBooleanUnaryExpression=ruleBooleanUnaryExpression 
	 { $current=$iv_ruleBooleanUnaryExpression.current; } 
	 EOF 
;

// Rule BooleanUnaryExpression
ruleBooleanUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_operator_0_0=	'!' 
    {
        newLeafNode(lv_operator_0_0, grammarAccess.getBooleanUnaryExpressionAccess().getOperatorExclamationMarkKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_0, "!");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_1_0()); 
	    }
		lv_operand_1_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBitStringUnaryExpression
entryRuleBitStringUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitStringUnaryExpressionRule()); }
	 iv_ruleBitStringUnaryExpression=ruleBitStringUnaryExpression 
	 { $current=$iv_ruleBitStringUnaryExpression.current; } 
	 EOF 
;

// Rule BitStringUnaryExpression
ruleBitStringUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_operator_0_0=	'~' 
    {
        newLeafNode(lv_operator_0_0, grammarAccess.getBitStringUnaryExpressionAccess().getOperatorTildeKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitStringUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_0, "~");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitStringUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_1_0()); 
	    }
		lv_operand_1_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitStringUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumericUnaryExpression
entryRuleNumericUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericUnaryExpressionRule()); }
	 iv_ruleNumericUnaryExpression=ruleNumericUnaryExpression 
	 { $current=$iv_ruleNumericUnaryExpression.current; } 
	 EOF 
;

// Rule NumericUnaryExpression
ruleNumericUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericUnaryExpressionAccess().getOperatorNumericUnaryOperatorEnumRuleCall_0_0_0()); 
	    }
		lv_operator_0_0=ruleNumericUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"NumericUnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericUnaryExpressionAccess().getOperandPostfixOrCastExpressionParserRuleCall_0_1_0_0()); 
	    }
		lv_operand_1_1=rulePostfixOrCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_1, 
        		"PostfixOrCastExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getNumericUnaryExpressionAccess().getOperandNonPostfixNonCastUnaryExpressionParserRuleCall_0_1_0_1()); 
	    }
		lv_operand_1_2=ruleNonPostfixNonCastUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_2, 
        		"NonPostfixNonCastUnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericUnaryExpressionAccess().getOperatorNumericUnaryOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_operator_2_0=ruleNumericUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"NumericUnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumericUnaryExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericUnaryExpressionAccess().getOperandPrefixExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_4_0=rulePrefixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_4_0, 
        		"PrefixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNumericUnaryExpressionAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleIsolationExpression
entryRuleIsolationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsolationExpressionRule()); }
	 iv_ruleIsolationExpression=ruleIsolationExpression 
	 { $current=$iv_ruleIsolationExpression.current; } 
	 EOF 
;

// Rule IsolationExpression
ruleIsolationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_operator_0_0=	'$' 
    {
        newLeafNode(lv_operator_0_0, grammarAccess.getIsolationExpressionAccess().getOperatorDollarSignKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsolationExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_0, "\$");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIsolationExpressionAccess().getOperandUnaryExpressionParserRuleCall_1_0()); 
	    }
		lv_operand_1_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsolationExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCastExpression
entryRuleCastExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastExpressionRule()); }
	 iv_ruleCastExpression=ruleCastExpression 
	 { $current=$iv_ruleCastExpression.current; } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCastExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExpressionAccess().getTypeTypeDeclarationParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExpressionAccess().getOperandCastCompletionParserRuleCall_3_0()); 
	    }
		lv_operand_3_0=ruleCastCompletion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"CastCompletion");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCastCompletion
entryRuleCastCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastCompletionRule()); }
	 iv_ruleCastCompletion=ruleCastCompletion 
	 { $current=$iv_ruleCastCompletion.current; } 
	 EOF 
;

// Rule CastCompletion
ruleCastCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCastCompletionAccess().getPostfixOrCastExpressionParserRuleCall_0()); 
    }
    this_PostfixOrCastExpression_0=rulePostfixOrCastExpression
    { 
        $current = $this_PostfixOrCastExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCastCompletionAccess().getBooleanUnaryExpressionParserRuleCall_1()); 
    }
    this_BooleanUnaryExpression_1=ruleBooleanUnaryExpression
    { 
        $current = $this_BooleanUnaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCastCompletionAccess().getBitStringUnaryExpressionParserRuleCall_2()); 
    }
    this_BitStringUnaryExpression_2=ruleBitStringUnaryExpression
    { 
        $current = $this_BitStringUnaryExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCastCompletionAccess().getIsolationExpressionParserRuleCall_3()); 
    }
    this_IsolationExpression_3=ruleIsolationExpression
    { 
        $current = $this_IsolationExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getArithmeticExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorParserRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperand2UnaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeOperatorRule()); } 
	 iv_ruleMultiplicativeOperator=ruleMultiplicativeOperator 
	 { $current=$iv_ruleMultiplicativeOperator.current.getText(); }  
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getPercentSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getArithmeticExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorParserRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperand2MultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveOperatorRule()); } 
	 iv_ruleAdditiveOperator=ruleAdditiveOperator 
	 { $current=$iv_ruleAdditiveOperator.current.getText(); }  
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftExpressionAccess().getShiftExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleShiftOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ShiftOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getOperand2AdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
    }
    this_ShiftExpression_0=ruleShiftExpression
    { 
        $current = $this_ShiftExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperand2ShiftExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleClassificationExpression
entryRuleClassificationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassificationExpressionRule()); }
	 iv_ruleClassificationExpression=ruleClassificationExpression 
	 { $current=$iv_ruleClassificationExpression.current; } 
	 EOF 
;

// Rule ClassificationExpression
ruleClassificationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassificationExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getClassificationExpressionAccess().getClassificationExpressionOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassificationExpressionAccess().getOperatorClassificationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleClassificationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassificationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ClassificationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassificationExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassificationExpressionAccess().getTypeClassCrossReference_1_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getClassificationExpressionParserRuleCall_0()); 
    }
    this_ClassificationExpression_0=ruleClassificationExpression
    { 
        $current = $this_ClassificationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getEqualityExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"EqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperand2ClassificationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleClassificationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"ClassificationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getLogicalExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'&' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getAndExpressionAccess().getOperatorAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getOperand2EqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExclusiveOrExpressionRule()); }
	 iv_ruleExclusiveOrExpression=ruleExclusiveOrExpression 
	 { $current=$iv_ruleExclusiveOrExpression.current; } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExclusiveOrExpressionAccess().getLogicalExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'^' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getExclusiveOrExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "^");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getOperand2AndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInclusiveOrExpressionRule()); }
	 iv_ruleInclusiveOrExpression=ruleInclusiveOrExpression 
	 { $current=$iv_ruleInclusiveOrExpression.current; } 
	 EOF 
;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getExclusiveOrExpressionParserRuleCall_0()); 
    }
    this_ExclusiveOrExpression_0=ruleExclusiveOrExpression
    { 
        $current = $this_ExclusiveOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInclusiveOrExpressionAccess().getLogicalExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'|' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getInclusiveOrExpressionAccess().getOperatorVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInclusiveOrExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getOperand2ExclusiveOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInclusiveOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditionalAndExpression
entryRuleConditionalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalAndExpressionRule()); }
	 iv_ruleConditionalAndExpression=ruleConditionalAndExpression 
	 { $current=$iv_ruleConditionalAndExpression.current; } 
	 EOF 
;

// Rule ConditionalAndExpression
ruleConditionalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getInclusiveOrExpressionParserRuleCall_0()); 
    }
    this_InclusiveOrExpression_0=ruleInclusiveOrExpression
    { 
        $current = $this_InclusiveOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalAndExpressionAccess().getConditionalLogicalExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'&&' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getConditionalAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalAndExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "&&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getOperand2InclusiveOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleInclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"InclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditionalOrExpression
entryRuleConditionalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalOrExpressionRule()); }
	 iv_ruleConditionalOrExpression=ruleConditionalOrExpression 
	 { $current=$iv_ruleConditionalOrExpression.current; } 
	 EOF 
;

// Rule ConditionalOrExpression
ruleConditionalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getConditionalAndExpressionParserRuleCall_0()); 
    }
    this_ConditionalAndExpression_0=ruleConditionalAndExpression
    { 
        $current = $this_ConditionalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalOrExpressionAccess().getConditionalLogicalExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'||' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getConditionalOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalOrExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "||");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getOperand2ConditionalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"ConditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getConditionalOrExpressionParserRuleCall_0()); 
    }
    this_ConditionalOrExpression_0=ruleConditionalOrExpression
    { 
        $current = $this_ConditionalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalExpressionAccess().getConditionalTestExpressionOperand1Action_1_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getOperand2ExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getOperand3ConditionalExpressionParserRuleCall_1_4_0()); 
	    }
		lv_operand3_5_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"operand3",
        		lv_operand3_5_0, 
        		"ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getLeftHandSideLeftHandSideParserRuleCall_0_0()); 
	    }
		lv_leftHandSide_0_0=ruleLeftHandSide		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"leftHandSide",
        		lv_leftHandSide_0_0, 
        		"LeftHandSide");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightHandSideExpressionParserRuleCall_2_0()); 
	    }
		lv_rightHandSide_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"rightHandSide",
        		lv_rightHandSide_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLeftHandSide
entryRuleLeftHandSide returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeftHandSideRule()); }
	 iv_ruleLeftHandSide=ruleLeftHandSide 
	 { $current=$iv_ruleLeftHandSide.current; } 
	 EOF 
;

// Rule LeftHandSide
ruleLeftHandSide returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLeftHandSideAccess().getNameLeftHandSideParserRuleCall_0()); 
    }
    this_NameLeftHandSide_0=ruleNameLeftHandSide
    { 
        $current = $this_NameLeftHandSide_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLeftHandSideAccess().getFeatureLeftHandSideParserRuleCall_1()); 
    }
    this_FeatureLeftHandSide_1=ruleFeatureLeftHandSide
    { 
        $current = $this_FeatureLeftHandSide_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNameLeftHandSide
entryRuleNameLeftHandSide returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameLeftHandSideRule()); }
	 iv_ruleNameLeftHandSide=ruleNameLeftHandSide 
	 { $current=$iv_ruleNameLeftHandSide.current; } 
	 EOF 
;

// Rule NameLeftHandSide
ruleNameLeftHandSide returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNameLeftHandSideAccess().getExpressionNameExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleNameExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameLeftHandSideRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"NameExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNameLeftHandSideAccess().getIndexIndexParserRuleCall_1_0()); 
	    }
		lv_index_1_0=ruleIndex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameLeftHandSideRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_1_0, 
        		"Index");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFeatureLeftHandSide
entryRuleFeatureLeftHandSide returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureLeftHandSideRule()); }
	 iv_ruleFeatureLeftHandSide=ruleFeatureLeftHandSide 
	 { $current=$iv_ruleFeatureLeftHandSide.current; } 
	 EOF 
;

// Rule FeatureLeftHandSide
ruleFeatureLeftHandSide returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureLeftHandSideAccess().getExpressionPropertyAccessExpressionParserRuleCall_0()); 
	    }
		lv_expression_0_0=rulePropertyAccessExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureLeftHandSideRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"PropertyAccessExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSimpleStatementParserRuleCall_0_0()); 
    }
    this_SimpleStatement_0=ruleSimpleStatement
    { 
        $current = $this_SimpleStatement_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getSemicolonKeyword_0_1());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_1()); 
    }
    this_BlockStatement_2=ruleBlockStatement
    { 
        $current = $this_BlockStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2()); 
    }
    this_IfStatement_3=ruleIfStatement
    { 
        $current = $this_IfStatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_3()); 
    }
    this_SwitchStatement_4=ruleSwitchStatement
    { 
        $current = $this_SwitchStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_4()); 
    }
    this_WhileStatement_5=ruleWhileStatement
    { 
        $current = $this_WhileStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_5()); 
    }
    this_ForStatement_6=ruleForStatement
    { 
        $current = $this_ForStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForEachStatementParserRuleCall_6()); 
    }
    this_ForEachStatement_7=ruleForEachStatement
    { 
        $current = $this_ForEachStatement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDoStatementParserRuleCall_7()); 
    }
    this_DoStatement_8=ruleDoStatement
    { 
        $current = $this_DoStatement_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); 
    }
    this_BreakStatement_9=ruleBreakStatement
    { 
        $current = $this_BreakStatement_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_9()); 
    }
    this_ReturnStatement_10=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getClassifyStatementParserRuleCall_10()); 
    }
    this_ClassifyStatement_11=ruleClassifyStatement
    { 
        $current = $this_ClassifyStatement_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSendSignalStatementParserRuleCall_11()); 
    }
    this_SendSignalStatement_12=ruleSendSignalStatement
    { 
        $current = $this_SendSignalStatement_12.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleStatement
entryRuleSimpleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleStatementRule()); }
	 iv_ruleSimpleStatement=ruleSimpleStatement 
	 { $current=$iv_ruleSimpleStatement.current; } 
	 EOF 
;

// Rule SimpleStatement
ruleSimpleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimpleStatementAccess().getLocalNameDeclarationStatementParserRuleCall_0()); 
    }
    this_LocalNameDeclarationStatement_0=ruleLocalNameDeclarationStatement
    { 
        $current = $this_LocalNameDeclarationStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimpleStatementAccess().getExpressionStatementParserRuleCall_1()); 
    }
    this_ExpressionStatement_1=ruleExpressionStatement
    { 
        $current = $this_ExpressionStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimpleStatementAccess().getEmptyStatementParserRuleCall_2()); 
    }
    this_EmptyStatement_2=ruleEmptyStatement
    { 
        $current = $this_EmptyStatement_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getBlockParserRuleCall()); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleEmptyStatement
entryRuleEmptyStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyStatementRule()); }
	 iv_ruleEmptyStatement=ruleEmptyStatement 
	 { $current=$iv_ruleEmptyStatement.current; } 
	 EOF 
;

// Rule EmptyStatement
ruleEmptyStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEmptyStatementAccess().getEmptyStatementAction(),
            $current);
    }
)
;





// Entry rule entryRuleMultiplicityIndicator
entryRuleMultiplicityIndicator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicityIndicatorRule()); } 
	 iv_ruleMultiplicityIndicator=ruleMultiplicityIndicator 
	 { $current=$iv_ruleMultiplicityIndicator.current.getText(); }  
	 EOF 
;

// Rule MultiplicityIndicator
ruleMultiplicityIndicator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicityIndicatorAccess().getLeftSquareBracketKeyword_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicityIndicatorAccess().getRightSquareBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDeclarationAccess().getVariableAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeDeclarationParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getHasMultiplicityMultiplicityIndicatorParserRuleCall_2_0()); 
	    }
		lv_hasMultiplicity_2_0=ruleMultiplicityIndicator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"hasMultiplicity",
        		true, 
        		"MultiplicityIndicator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocalNameDeclarationStatement
entryRuleLocalNameDeclarationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalNameDeclarationStatementRule()); }
	 iv_ruleLocalNameDeclarationStatement=ruleLocalNameDeclarationStatement 
	 { $current=$iv_ruleLocalNameDeclarationStatement.current; } 
	 EOF 
;

// Rule LocalNameDeclarationStatement
ruleLocalNameDeclarationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalNameDeclarationStatementAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalNameDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalNameDeclarationStatementAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalNameDeclarationStatementAccess().getExpressionInitializationExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleInitializationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalNameDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"InitializationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInitializationExpression
entryRuleInitializationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializationExpressionRule()); }
	 iv_ruleInitializationExpression=ruleInitializationExpression 
	 { $current=$iv_ruleInitializationExpression.current; } 
	 EOF 
;

// Rule InitializationExpression
ruleInitializationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInitializationExpressionAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInitializationExpressionAccess().getInstanceInitializationExpressionParserRuleCall_1()); 
    }
    this_InstanceInitializationExpression_1=ruleInstanceInitializationExpression
    { 
        $current = $this_InstanceInitializationExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInstanceInitializationExpression
entryRuleInstanceInitializationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceInitializationExpressionRule()); }
	 iv_ruleInstanceInitializationExpression=ruleInstanceInitializationExpression 
	 { $current=$iv_ruleInstanceInitializationExpression.current; } 
	 EOF 
;

// Rule InstanceInitializationExpression
ruleInstanceInitializationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstanceInitializationExpressionAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceInitializationExpressionAccess().getTupleTupleParserRuleCall_1_0()); 
	    }
		lv_tuple_1_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceInitializationExpressionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_1_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getNonFinalClausesConcurrentClausesParserRuleCall_1_0()); 
	    }
		lv_nonFinalClauses_1_0=ruleConcurrentClauses		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"nonFinalClauses",
        		lv_nonFinalClauses_1_0, 
        		"ConcurrentClauses");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='else' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getElseKeyword_2_0());
    }
	otherlv_3='if' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getIfKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getNonFinalClausesConcurrentClausesParserRuleCall_2_2_0()); 
	    }
		lv_nonFinalClauses_4_0=ruleConcurrentClauses		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"nonFinalClauses",
        		lv_nonFinalClauses_4_0, 
        		"ConcurrentClauses");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getFinalClauseBlockParserRuleCall_3_1_0()); 
	    }
		lv_finalClause_6_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"finalClause",
        		lv_finalClause_6_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConcurrentClauses
entryRuleConcurrentClauses returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConcurrentClausesRule()); }
	 iv_ruleConcurrentClauses=ruleConcurrentClauses 
	 { $current=$iv_ruleConcurrentClauses.current; } 
	 EOF 
;

// Rule ConcurrentClauses
ruleConcurrentClauses returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentClausesAccess().getClauseNonFinalClauseParserRuleCall_0_0()); 
	    }
		lv_clause_0_0=ruleNonFinalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentClausesRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_0_0, 
        		"NonFinalClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConcurrentClausesAccess().getOrKeyword_1_0());
    }
	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConcurrentClausesAccess().getIfKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentClausesAccess().getClauseNonFinalClauseParserRuleCall_1_2_0()); 
	    }
		lv_clause_3_0=ruleNonFinalClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentClausesRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_3_0, 
        		"NonFinalClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNonFinalClause
entryRuleNonFinalClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonFinalClauseRule()); }
	 iv_ruleNonFinalClause=ruleNonFinalClause 
	 { $current=$iv_ruleNonFinalClause.current; } 
	 EOF 
;

// Rule NonFinalClause
ruleNonFinalClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNonFinalClauseAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonFinalClauseAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonFinalClauseRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNonFinalClauseAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonFinalClauseAccess().getBodyBlockParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonFinalClauseRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getNonDefaultClauseSwitchClauseParserRuleCall_5_0()); 
	    }
		lv_nonDefaultClause_5_0=ruleSwitchClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		add(
       			$current, 
       			"nonDefaultClause",
        		lv_nonDefaultClause_5_0, 
        		"SwitchClause");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getDefaultClauseSwitchDefaultClauseParserRuleCall_6_0()); 
	    }
		lv_defaultClause_6_0=ruleSwitchDefaultClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"defaultClause",
        		lv_defaultClause_6_0, 
        		"SwitchDefaultClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleSwitchClause
entryRuleSwitchClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchClauseRule()); }
	 iv_ruleSwitchClause=ruleSwitchClause 
	 { $current=$iv_ruleSwitchClause.current; } 
	 EOF 
;

// Rule SwitchClause
ruleSwitchClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchClauseAccess().getCaseSwitchCaseParserRuleCall_0_0()); 
	    }
		lv_case_0_0=ruleSwitchCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchClauseRule());
	        }
       		add(
       			$current, 
       			"case",
        		lv_case_0_0, 
        		"SwitchCase");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchClauseAccess().getCaseSwitchCaseParserRuleCall_1_0()); 
	    }
		lv_case_1_0=ruleSwitchCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchClauseRule());
	        }
       		add(
       			$current, 
       			"case",
        		lv_case_1_0, 
        		"SwitchCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchClauseAccess().getBlockNonEmptyStatementSequenceParserRuleCall_2_0()); 
	    }
		lv_block_2_0=ruleNonEmptyStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchClauseRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_2_0, 
        		"NonEmptyStatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSwitchCase
entryRuleSwitchCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchCaseRule()); }
	 iv_ruleSwitchCase=ruleSwitchCase 
	 { $current=$iv_ruleSwitchCase.current; } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchCaseAccess().getCaseKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSwitchCaseAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchCaseAccess().getColonKeyword_2());
    }
)
;





// Entry rule entryRuleSwitchDefaultClause
entryRuleSwitchDefaultClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchDefaultClauseRule()); }
	 iv_ruleSwitchDefaultClause=ruleSwitchDefaultClause 
	 { $current=$iv_ruleSwitchDefaultClause.current; } 
	 EOF 
;

// Rule SwitchDefaultClause
ruleSwitchDefaultClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='default' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchDefaultClauseAccess().getDefaultKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchDefaultClauseAccess().getColonKeyword_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSwitchDefaultClauseAccess().getNonEmptyStatementSequenceParserRuleCall_2()); 
    }
    this_NonEmptyStatementSequence_2=ruleNonEmptyStatementSequence
    { 
        $current = $this_NonEmptyStatementSequence_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNonEmptyStatementSequence
entryRuleNonEmptyStatementSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonEmptyStatementSequenceRule()); }
	 iv_ruleNonEmptyStatementSequence=ruleNonEmptyStatementSequence 
	 { $current=$iv_ruleNonEmptyStatementSequence.current; } 
	 EOF 
;

// Rule NonEmptyStatementSequence
ruleNonEmptyStatementSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonEmptyStatementSequenceAccess().getStatementStatementParserRuleCall_0()); 
	    }
		lv_statement_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonEmptyStatementSequenceRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getBodyBlockParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoStatement
entryRuleDoStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoStatementRule()); }
	 iv_ruleDoStatement=ruleDoStatement 
	 { $current=$iv_ruleDoStatement.current; } 
	 EOF 
;

// Rule DoStatement
ruleDoStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoStatementAccess().getBodyBlockParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoStatementRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoStatementAccess().getConditionExpressionParserRuleCall_4_0()); 
	    }
		lv_condition_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDoStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getInitializationSimpleStatementParserRuleCall_2_0()); 
	    }
		lv_initialization_2_0=ruleSimpleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"initialization",
        		lv_initialization_2_0, 
        		"SimpleStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getConditionExpressionParserRuleCall_4_0()); 
	    }
		lv_condition_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getSemicolonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getUpdateSimpleStatementParserRuleCall_6_0()); 
	    }
		lv_update_6_0=ruleSimpleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_6_0, 
        		"SimpleStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getBodyBlockParserRuleCall_8_0()); 
	    }
		lv_body_8_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_8_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForEachStatement
entryRuleForEachStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForEachStatementRule()); }
	 iv_ruleForEachStatement=ruleForEachStatement 
	 { $current=$iv_ruleForEachStatement.current; } 
	 EOF 
;

// Rule ForEachStatement
ruleForEachStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForEachStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForEachStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachStatementAccess().getVariableDefinitionLoopVariableDefinitionParserRuleCall_2_0()); 
	    }
		lv_variableDefinition_2_0=ruleLoopVariableDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachStatementRule());
	        }
       		set(
       			$current, 
       			"variableDefinition",
        		lv_variableDefinition_2_0, 
        		"LoopVariableDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForEachStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachStatementAccess().getBodyBlockParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachStatementRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoopVariableDefinition
entryRuleLoopVariableDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopVariableDefinitionRule()); }
	 iv_ruleLoopVariableDefinition=ruleLoopVariableDefinition 
	 { $current=$iv_ruleLoopVariableDefinition.current; } 
	 EOF 
;

// Rule LoopVariableDefinition
ruleLoopVariableDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLoopVariableDefinitionAccess().getLoopVariableAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getNameNameParserRuleCall_1_0_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getTypeTypeDeclarationParserRuleCall_1_1_0_0()); 
	    }
		lv_type_2_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getNameNameParserRuleCall_1_1_1_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopVariableDefinitionAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
            $current);
    }
)	otherlv_1='break' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
    }
	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleClassifyStatement
entryRuleClassifyStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassifyStatementRule()); }
	 iv_ruleClassifyStatement=ruleClassifyStatement 
	 { $current=$iv_ruleClassifyStatement.current; } 
	 EOF 
;

// Rule ClassifyStatement
ruleClassifyStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='classify' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassifyStatementAccess().getClassifyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifyStatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifyStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getClassifyStatementAccess().getFromListClassificationFromClauseParserRuleCall_2_0_0_0()); 
	    }
		lv_fromList_2_0=ruleClassificationFromClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifyStatementRule());
	        }
       		set(
       			$current, 
       			"fromList",
        		lv_fromList_2_0, 
        		"ClassificationFromClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifyStatementAccess().getToListClassificationToClauseParserRuleCall_2_0_1_0()); 
	    }
		lv_toList_3_0=ruleClassificationToClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifyStatementRule());
	        }
       		set(
       			$current, 
       			"toList",
        		lv_toList_3_0, 
        		"ClassificationToClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getClassifyStatementAccess().getIsReclassifyAllReclassifyAllClauseParserRuleCall_2_1_0_0()); 
	    }
		lv_isReclassifyAll_4_0=ruleReclassifyAllClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifyStatementRule());
	        }
       		set(
       			$current, 
       			"isReclassifyAll",
        		true, 
        		"ReclassifyAllClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifyStatementAccess().getToListClassificationToClauseParserRuleCall_2_1_1_0()); 
	    }
		lv_toList_5_0=ruleClassificationToClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifyStatementRule());
	        }
       		set(
       			$current, 
       			"toList",
        		lv_toList_5_0, 
        		"ClassificationToClause");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassifyStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleClassificationFromClause
entryRuleClassificationFromClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassificationFromClauseRule()); }
	 iv_ruleClassificationFromClause=ruleClassificationFromClause 
	 { $current=$iv_ruleClassificationFromClause.current; } 
	 EOF 
;

// Rule ClassificationFromClause
ruleClassificationFromClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='from' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassificationFromClauseAccess().getFromKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassificationFromClauseAccess().getQualifiedNameListParserRuleCall_1()); 
    }
    this_QualifiedNameList_1=ruleQualifiedNameList
    { 
        $current = $this_QualifiedNameList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClassificationToClause
entryRuleClassificationToClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassificationToClauseRule()); }
	 iv_ruleClassificationToClause=ruleClassificationToClause 
	 { $current=$iv_ruleClassificationToClause.current; } 
	 EOF 
;

// Rule ClassificationToClause
ruleClassificationToClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='to' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassificationToClauseAccess().getToKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassificationToClauseAccess().getQualifiedNameListParserRuleCall_1()); 
    }
    this_QualifiedNameList_1=ruleQualifiedNameList
    { 
        $current = $this_QualifiedNameList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReclassifyAllClause
entryRuleReclassifyAllClause returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReclassifyAllClauseRule()); } 
	 iv_ruleReclassifyAllClause=ruleReclassifyAllClause 
	 { $current=$iv_ruleReclassifyAllClause.current.getText(); }  
	 EOF 
;

// Rule ReclassifyAllClause
ruleReclassifyAllClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='from' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReclassifyAllClauseAccess().getFromKeyword_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReclassifyAllClauseAccess().getAsteriskKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedNameList
entryRuleQualifiedNameList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameListRule()); }
	 iv_ruleQualifiedNameList=ruleQualifiedNameList 
	 { $current=$iv_ruleQualifiedNameList.current; } 
	 EOF 
;

// Rule QualifiedNameList
ruleQualifiedNameList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameListAccess().getNameQualifiedNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameListRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQualifiedNameListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameListAccess().getNameQualifiedNameParserRuleCall_1_1_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameListRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSendSignalStatement
entryRuleSendSignalStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSendSignalStatementRule()); }
	 iv_ruleSendSignalStatement=ruleSendSignalStatement 
	 { $current=$iv_ruleSendSignalStatement.current; } 
	 EOF 
;

// Rule SendSignalStatement
ruleSendSignalStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSendSignalStatementAccess().getSendSignalStatementAction_0(),
            $current);
    }
)	otherlv_1='send' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSendSignalStatementAccess().getSendKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSendSignalStatementAccess().getSignalExpressionParserRuleCall_2_0()); 
	    }
		lv_signal_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSendSignalStatementRule());
	        }
       		set(
       			$current, 
       			"signal",
        		lv_signal_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSendSignalStatementAccess().getToKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSendSignalStatementAccess().getTargetExpressionParserRuleCall_4_0()); 
	    }
		lv_target_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSendSignalStatementRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSendSignalStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Rule LinkOperation
ruleLinkOperation returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='link' 
	{
        $current = grammarAccess.getLinkOperationAccess().getLinkEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLinkOperationAccess().getLinkEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='unlink' 
	{
        $current = grammarAccess.getLinkOperationAccess().getUnlinkEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLinkOperationAccess().getUnlinkEnumLiteralDeclaration_1()); 
    }
));



// Rule CollectionType
ruleCollectionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='set' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getSetEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCollectionTypeAccess().getSetEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bag' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getBagEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCollectionTypeAccess().getBagEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='sequence' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getSequenceEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCollectionTypeAccess().getSequenceEnumLiteralDeclaration_2()); 
    }
));



// Rule AffixOperator
ruleAffixOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getAffixOperatorAccess().getIncrementEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAffixOperatorAccess().getIncrementEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getAffixOperatorAccess().getDecrementEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAffixOperatorAccess().getDecrementEnumLiteralDeclaration_1()); 
    }
));



// Rule NumericUnaryOperator
ruleNumericUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getNumericUnaryOperatorAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNumericUnaryOperatorAccess().getPlusEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getNumericUnaryOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNumericUnaryOperatorAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule ShiftOperator
ruleShiftOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>>' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<<' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>>>' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getTripleEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getShiftOperatorAccess().getTripleEnumLiteralDeclaration_2()); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getLesserThanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getLesserThanEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterOrEqualsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getGreaterOrEqualsEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getLesserOrEqualsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getLesserOrEqualsEnumLiteralDeclaration_3()); 
    }
));



// Rule ClassificationOperator
ruleClassificationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='instanceof' 
	{
        $current = grammarAccess.getClassificationOperatorAccess().getInstanceofEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getClassificationOperatorAccess().getInstanceofEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='hastype' 
	{
        $current = grammarAccess.getClassificationOperatorAccess().getHastypeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getClassificationOperatorAccess().getHastypeEnumLiteralDeclaration_1()); 
    }
));



// Rule EqualityOperator
ruleEqualityOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getEqualsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getEqualsEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getNotEqualsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNotEqualsEnumLiteralDeclaration_1()); 
    }
));



// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getIncrementAssignEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignmentOperatorAccess().getIncrementAssignEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='-=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getDecrementAssignEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssignmentOperatorAccess().getDecrementAssignEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='*=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMultiplyAssignEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAssignmentOperatorAccess().getMultiplyAssignEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='/=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getDivisionAssignEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAssignmentOperatorAccess().getDivisionAssignEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='%=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getModuloAssignEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAssignmentOperatorAccess().getModuloAssignEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='&=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='|=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='^=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='<<=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='>>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getTripleShiftAssignEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getAssignmentOperatorAccess().getTripleShiftAssignEnumLiteralDeclaration_11()); 
    }
));



RULE_BOOLEAN_VALUE : ('true'|'false');

RULE_NATURAL_VALUE : (('0'|'1'..'9' ('_'? '0'..'9')*)|('0b'|'0B') '0'..'1' ('_'? '0'..'1')*|('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F') ('_'? ('0'..'9'|'a'..'f'|'A'..'F'))*|'0' '_'? '0'..'7' ('_'? '0'..'7')*);

RULE_REAL_VALUE : ('0'|'1'..'9' ('_'? '0'..'9')*) '.' '0'..'9' ('_'? '0'..'9')*;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UNRESTRICTED_NAME : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ~(('*'|'@')) ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' (~(('@'|'\n'|'\r')) ~(('\n'|'\r'))*)? ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


