--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: Default Scripts
Element-Type: context
Element-Version: 2.0
Id: _sXg1IB2BEeWfUbA_Erpteg
Runtime-Version: 2.0.0.201509132315
Save-Time: 9/30/15 9:45 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context


// This file contains scripts used in Model Execution testing.
// The names of utility procedures begin with "mx-" for Model eXecution.


// Closes the Outline view that is unnecessary for most tests.
// Since we can only add views to contexts, closing them has to be done manually.
proc "mx-close-outline-view" {
	get-view Outline | close
}


// Creates an xUML project with the given name in the Workspace.
proc "mx-new-xuml-project" [val name] {
	wait-until-eclipse-is-ready

	get-view "Project Explorer" | get-tree | key-type "M1+n"
	with [get-window New] {
	    get-tree | select "Papyrus/xUML-RT Project"
	}

	// The "Next" button must be enabled by now.
	get-window New | get-button "Next >" | get-property enablement | equals true | verify-true

	get-window New | get-button "Next >" | click

	get-window -class WizardDialog | get-editbox -after [get-label "Project name:"] | set-text $name

	// The "Finish" button must be enabled by now.
	get-window -class WizardDialog | get-button Finish | get-property enablement | equals true | verify-true

	get-window -class WizardDialog | get-button Finish | click
}


// Copies the model (project_name) that is included in the default workbench to TestProject.
proc "mx-copy-model-to-test" [val project_name] {
	with [get-view "Project Explorer" | get-tree] {
	    select [concat "TestModels/" $project_name] | key-type "M1+c"
	    select TestProject | key-type "M1+v"
	}
}


// Opens the default package in TestProject by double clicking on it.
// It MUST be open if its sub-items are to be inspected.
proc "mx-open-default-package" {
    get-view "Project Explorer" | get-tree | select "TestProject/model-gen-src/\\(default package\\)" | double-click
}


// Gets the textual contents of a generated Java source file.
// The file is the idx'eth file in the default package in the Project Explorer.
proc "mx-get-gen-src-item" [val idx] {
	get-view "Project Explorer" | get-tree | get-item "TestProject/model-gen-src/\\(default package\\)"  | get-property [concat "getItems().TreeItem[" $idx "].getData().getSource()"] -raw
}


// Opens the model with the model name. It will be displayed in the Model Explorer.
proc "mx-open-model" [val model_name] {
	get-view "Project Explorer" | get-tree | select [concat "TestProject/" $model_name] | double-click
}


// Refreshes the project with the given name.
proc "mx-refresh-project" [val project_name] {
	get-view "Project Explorer" | get-tree | select $project_name | key-type F5
}


// Checks whether the expected number of files were generated.
// It is assumed that upon call, the model-gen-src folder is open in Project Explorer.
proc "mx-check-generated-file-count" [val expected] {
	get-view Navigator | get-tree | select TestProject | get-menu Refresh | click
	let [val actual [get-view Navigator | get-tree | get-item "TestProject/model-gen-src"]] {
		$actual | get-property "getItems().length" -raw | equals $expected | assert-true [concat "Expected " $expected " files, got " [$actual | get-property "getItems().length" -raw]]
	}
}

// Selects the xUML-RT Execution Engine.
proc "mx-select-execution-engine" {
	get-preferences-menu | click
	with [get-window Preferences] {
	    get-tree | select "Papyrus/Moka"
	    get-button "xUML-RT Execution Engine" | click
	    get-button Apply | click
	    get-button OK | click
	}
}


// Cleans (and rebuilds) all projects
// This should not be necessary, but the build systems are not invoked otherwise in some cases
proc "mx-clean-projects" {
	get-menu "Project/Clean..." | click
	get-window Clean | get-button OK | click
}


// Opens the given perspective
proc "mx-open-perspective" [val perspectiveName] {
	get-button "Open Perspective" | click
	with [get-window "Open Perspective"] {
	    get-table | select $perspectiveName
	    get-button OK | click
	}
}

// Opens the given view
proc "mx-open-view" [val viewName] {
	get-menu "Window/Show View/Other..." | click
	with [get-window "Show View"] {
	    get-tree | select $viewName
	    get-button OK | click
	}
}

// Makes a full run config and saves it.
proc "mx-new-xuml-run-config" [val modelName] [val className] [val mainName] {
	mx-make-new-xuml-run-config
	mx-new-xuml-project-select-model $modelName
	mx-new-xuml-project-select-class $className
	mx-new-xuml-project-select-main-function $mainName
	mx-new-xuml-project-save-configuration
}

proc "mx-make-new-xuml-run-config" {
	get-menu "Run/Debug Configurations..." | click
	with [get-window "Debug Configurations"] {
	    get-tree | select "xUML-RT Executor" | double-click
	    with [get-editbox -after [get-label "Name:"]] {
	        set-text "xUMLTestRunConfig"
	    }
	    get-button Apply | click
	}
}	

proc "mx-new-xuml-project-select-model" [val modelName] {
	with [get-window "Debug Configurations"] {
	    get-group "Select model" | get-button Browse | click
	    with [get-window "Select model"] {
	        get-tree | select $modelName
	        get-button OK | click
	    }
	}
}

proc "mx-new-xuml-project-select-class" [val className] {
	with [get-window "Debug Configurations"] {
	    get-group "Select class" | get-button Browse | click
	    with [get-window "Select class"] {
	        get-table | select $className
	        get-button OK | click
	    }
	}
}

proc "mx-new-xuml-project-select-main-function" [val mainName] {
	with [get-window "Debug Configurations"] {
	    get-group "Select main function" | get-button Browse | click
	    with [get-window "Select main function"] {
	        get-table | select $mainName
	        get-button OK | click
	    }
	}
}


proc "mx-new-xuml-project-save-configuration" [val mainName] {
	with [get-window "Debug Configurations"] {
	    get-button Apply | click
	    get-button Close | click
	}
}

proc "mx-execute-run-configuration" {
	get-menu "Run/Run Configurations..." | click
	with [get-window "Run Configurations"] {
	    get-tree | select "xUML-RT Executor/xUMLTestRunConfig"
	    get-button Run | click
	}
}
	
proc "mx-execute-debug-configuration" {
	// Debug run has to be run from the Debug perspective
	mx-open-perspective "Debug"
	
	
	// Since the Debug view is open, we have to reopen the Model Explorer
	// to set breakpoints
	mx-open-view "Papyrus/Model Explorer"
	
	// We need the Problems view, hopefully it will be empty...
	mx-open-view "General/Problems"
	
	get-menu "Run/Debug Configurations..." | click
	with [get-window "Debug Configurations"] {
	    get-tree | select "xUML-RT Executor/xUMLTestRunConfig"
	    get-button Debug | click
	}
}


proc "mx-toggle-breakpoint" [val location] {
	mx-open-perspective Papyrus
	get-view "Model Explorer" | get-tree | select $location | get-menu "Moka/Debug/Toggle breakpoint" | click
}

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
