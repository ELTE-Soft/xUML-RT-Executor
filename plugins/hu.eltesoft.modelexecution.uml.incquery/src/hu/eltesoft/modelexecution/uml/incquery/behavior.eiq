package hu.eltesoft.modelexecution.uml.incquery

import "http://www.eclipse.org/uml2/5.0.0/UML"

pattern Behavior(behavior : Behavior) {
	OpaqueBehavior(behavior);
}

pattern
ContainerClassOfBehavior(behavior : Behavior, containerClass : Class) {
// operation
	Operation.method(operation, behavior);

	Class.ownedOperation(containerClass, operation);
} or {
// entry
	State.entry(state, behavior);

	find ContainerClassOfVertex(state, containerClass);

} or {
// exit
	State.exit(state, behavior);

	find ContainerClassOfVertex(state, containerClass);

} or {
// effect
	Transition.effect(transition, behavior);
	Transition.container(transition, region);

	find ContainerClassOfRegion(region, containerClass); // from region.eiq
}

pattern BehaviorParameter(behavior : Behavior, parameter : Parameter, direction : ParameterDirectionKind) {
	Behavior.ownedParameter(behavior, parameter);
	Parameter.direction(parameter, direction);
	direction != ParameterDirectionKind::^return;
}

pattern
BehaviorParameterType(behavior : Behavior, parameter : Parameter, type : Type, ordered, unique) {
	find BehaviorParameter(behavior, parameter, _);
	Parameter.type(parameter, type);
	Parameter.isOrdered(parameter, ordered);
	Parameter.isUnique(parameter, unique);
}

pattern
BehaviorParameterLowerBound(behavior : Behavior, parameter : Parameter, type : Type, lowerBound : ValueSpecification) {
	find BehaviorParameterType(behavior, parameter, type, _, _);
	Parameter.lowerValue(parameter, lowerBound);
}

pattern
BehaviorParameterUpperBound(behavior : Behavior, parameter : Parameter, type : Type, upperBound : ValueSpecification) {
	find BehaviorParameterType(behavior, parameter, type, _, _);
	Parameter.upperValue(parameter, upperBound);
}

pattern
BehaviorReturnType(behavior : Behavior, parameter : Parameter, type : Type, ordered, unique) {
	Behavior.ownedParameter(behavior, parameter);
	Parameter.direction(parameter, ParameterDirectionKind::^return);
	Parameter.type(parameter, type);
	Parameter.isOrdered(parameter, ordered);
	Parameter.isUnique(parameter, unique);
}

pattern
BehaviorReturnLowerBound(behavior : Behavior, parameter : Parameter, type : Type, lowerBound : ValueSpecification) {
	find BehaviorReturnType(behavior, parameter, type, _, _);
	Parameter.lowerValue(parameter, lowerBound);
}

pattern
BehaviorReturnUpperBound(behavior : Behavior, parameter : Parameter, type : Type, upperBound : ValueSpecification) {
	find BehaviorReturnType(behavior, parameter, type, _, _);
	Parameter.upperValue(parameter, upperBound);
}

pattern StaticBehavior(behavior : Behavior, isStatic) {
	Behavior.specification(behavior, operation);
	Operation.isStatic(operation, isStatic);
}

pattern AlfCode(behavior : Behavior, containerClass : Class, alfCode) {
	OpaqueBehavior.body(behavior, alfCode);
	OpaqueBehavior.language(behavior, langName);
	find ContainerClassOfBehavior(behavior, containerClass);
	check(Utils.toLowerCase(langName).equals("alf"));
}

private pattern
ContainerClassOfVertex(vertex : Vertex, containerClass : Class) {
	State.container(vertex, region);

	find ContainerClassOfRegion(region, containerClass); // from region.eiq
}
