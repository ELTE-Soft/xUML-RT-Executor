package hu.eltesoft.modelexecution.uml.incquery

import "http://www.eclipse.org/uml2/5.0.0/UML"

pattern Region(region : Region, regionName) {
	Region.name(region, regionName);
}

pattern
ContainerClassOfRegion(region : Region, containerClass : Class, containerClassName) {
	Class.name(containerClass, containerClassName);
	Class.ownedBehavior(containerClass, stateMachine);
	StateMachine.region(stateMachine, region);
}

pattern
Initials(region : Region, initPseudostate : Pseudostate, initPseudostateName, initTransition : Transition, firstState : State) {
	Pseudostate.container(initPseudostate, region);
	Pseudostate.kind(initPseudostate, ::initial);
	Pseudostate.name(initPseudostate, initPseudostateName);

	Transition.source(initTransition, initPseudostate);

	Transition.target(initTransition, firstState);
}

pattern State(region : Region, state : State, stateName) {
	State.container(state, region);
	State.name(state, stateName);
}

pattern Entry(region : Region, state : State, entry : Behavior, entryName) {
	State.container(state, region);
	State.entry(state, entry);
	Behavior.name(entry, entryName);
}

pattern Exit(region : Region, state : State, exit : Behavior, exitName) {
	State.container(state, region);
	State.exit(state, exit);
	Behavior.name(exit, exitName);
}

pattern
Transition(region : Region, source : State, transition : Transition, transitionName, event : Event, eventName, signal : Signal, messageName, target : State) {
	find TransitionBase(region, source, transition, event, eventName, target);
	SignalEvent.signal(event, signal);
	Signal.name(signal, messageName);
	Transition.name(transition, transitionName);
}

private pattern
TransitionBase(region : Region, source : State, transition : Transition, event : Event, eventName, target : State) {
	Transition.container(transition, region);
	Transition.source(transition, source);
	Transition.target(transition, target);
	Transition.trigger(transition, trigger);
	Trigger.event(trigger, event);
	Event.name(event, eventName);
}

pattern
TransitionEffect(region : Region, transition : Transition, effect : Behavior, effectName) {
	Transition.container(transition, region);
	Transition.effect(transition, effect);
	Behavior.name(effect, effectName);
}



