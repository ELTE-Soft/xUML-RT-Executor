package hu.eltesoft.modelexecution.uml.incquery

import "http://www.eclipse.org/uml2/5.0.0/UML"

pattern Cls(cls : Class) {
	Class(cls);
	neg find IsBehavior(cls);
	neg find IsStereotype(cls);
}

private pattern IsBehavior(behavior : Behavior) {
	Behavior(behavior);
}

private pattern IsStereotype(stereotype : Stereotype) {
	Stereotype(stereotype);
}

// state machine
pattern RegionOfClass(cls : Class, region : Region) {
	Class.ownedBehavior(cls, stateMachine);
	StateMachine.region(stateMachine, region);
}

// attributes
pattern Attribute(cls : Class, attribute : Property, isStatic) {
	find Cls(cls);
	Class.ownedAttribute(cls, attribute);
	Property.isStatic(attribute, isStatic);
}

pattern
AttributeType(cls : Class, attribute : Property, type, ordered, unique) {
	find Attribute(cls, attribute, _);
	Property.type(attribute, type);
	Property.isOrdered(attribute, ordered);
	Property.isUnique(attribute, unique);
}

pattern
AttributeLowerBound(cls : Class, attribute : Property, type, lowerBound : ValueSpecification) {
	find AttributeType(cls, attribute, type, _, _);
	Property.lowerValue(attribute, lowerBound);
}

pattern
AttributeUpperBound(cls : Class, attribute : Property, type, upperBound : ValueSpecification) {
	find AttributeType(cls, attribute, type, _, _);
	Property.upperValue(attribute, upperBound);
}

// operations
pattern Operation(cls : Class, operation : Operation, isStatic) {
	Class.ownedOperation(cls, operation);
	Operation.isStatic(operation, isStatic);
}

pattern
OperationParameter(cls : Class, operation : Operation, parameter : Parameter, direction : ParameterDirectionKind) {
	find Operation(cls, operation, _);
	Operation.ownedParameter(operation, parameter);
	Parameter.direction(parameter, direction);
	direction != ParameterDirectionKind::^return;
}

pattern
OperationParameterType(cls : Class, operation : Operation, parameter : Parameter, type, ordered, unique) {
	find OperationParameter(cls, operation, parameter, _);
	Parameter.type(parameter, type);
	Parameter.isOrdered(parameter, ordered);
	Parameter.isUnique(parameter, unique);
}

pattern
OperationParameterLowerBound(cls : Class, operation : Operation, parameter : Parameter, type, lowerBound : ValueSpecification) {
	find OperationParameterType(cls, operation, parameter, type, _, _);
	Parameter.lowerValue(parameter, lowerBound);
}

pattern
OperationParameterUpperBound(cls : Class, operation : Operation, parameter : Parameter, type, upperBound : ValueSpecification) {
	find OperationParameterType(cls, operation, parameter, type, _, _);
	Parameter.upperValue(parameter, upperBound);
}

private pattern
OperationReturn(cls : Class, operation : Operation, parameter : Parameter) {
	find Operation(cls, operation, _);
	Operation.ownedParameter(operation, parameter);
	Parameter.direction(parameter, ParameterDirectionKind::^return);
}

pattern
OperationReturnType(cls : Class, operation : Operation, type, ordered, unique) {
	find OperationReturn(cls, operation, parameter);
	Parameter.type(parameter, type);
	Parameter.isOrdered(parameter, ordered);
	Parameter.isUnique(parameter, unique);
}

pattern
OperationReturnLowerBound(cls : Class, operation : Operation, type, lowerBound : ValueSpecification) {
	find OperationReturn(cls, operation, parameter);
	find OperationReturnType(cls, operation, type, _, _);
	Parameter.lowerValue(parameter, lowerBound);
}

pattern
OperationReturnUpperBound(cls : Class, operation : Operation, type, upperBound : ValueSpecification) {
	find OperationReturn(cls, operation, parameter);
	find OperationReturnType(cls, operation, type, _, _);
	Parameter.upperValue(parameter, upperBound);
}

pattern Method(cls : Class, operation : Operation, method : Behavior) {
	Class.ownedOperation(cls, operation);
	Operation.method(operation, method);
}

// receptions
pattern Reception(cls : Class, reception : Reception, signal : Signal) {
	Class.ownedReception(cls, reception);
	Reception.signal(reception, signal);
}

pattern
ReceptionParameter(cls : Class, reception : Reception, parameter : Parameter) {
	find Reception(cls, reception, _);
	Reception.ownedParameter(reception, parameter);
	Parameter.direction(parameter, direction);
	direction == ParameterDirectionKind::in;
}

pattern
ReceptionParameterType(cls : Class, reception : Reception, parameter : Parameter, type, ordered, unique) {
	find ReceptionParameter(cls, reception, parameter);
	Parameter.type(parameter, type);
	Parameter.isOrdered(parameter, ordered);
	Parameter.isUnique(parameter, unique);
}

pattern
ReceptionParameterLowerBound(cls : Class, reception : Reception, parameter : Parameter, type, lowerBound : ValueSpecification) {
	find ReceptionParameterType(cls, reception, parameter, type, _, _);
	Parameter.lowerValue(parameter, lowerBound);
}

pattern
ReceptionParameterUpperBound(cls : Class, reception : Reception, parameter : Parameter, type, upperBound : ValueSpecification) {
	find ReceptionParameterType(cls, reception, parameter, type, _, _);
	Parameter.upperValue(parameter, upperBound);
}

// class associations
pattern ClassAssociation(cls : Class, end : Property) {
	find AssociationEndType(_, end, cls);
}

pattern
ClassAssociationType(cls : Class, end : Property, type : Association) {
	find AssociationEndType(type, end, cls);
}

pattern
ClassAssociationLowerBound(cls : Class, end : Property, type : Association, lowerBound : ValueSpecification) {
	find ClassAssociationType(cls, end, type);
	find AssociationOtherEnd(end, otherEnd);
	Property.lowerValue(otherEnd, lowerBound);
}

pattern
ClassAssociationUpperBound(cls : Class, end : Property, type : Association, upperBound : ValueSpecification) {
	find ClassAssociationType(cls, end, type);
	find AssociationOtherEnd(end, otherEnd);
	Property.upperValue(otherEnd, upperBound);
}

