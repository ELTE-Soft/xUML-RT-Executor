package hu.eltesoft.modelexecution.validation

import "http://www.eclipse.org/uml2/5.0.0/UML"
import hu.eltesoft.modelexecution.uml.incquery.ClassOrAssocClass
import hu.eltesoft.modelexecution.uml.incquery.Operation

// FIXME: reenable when qualified name is correct
//@Violation(message = "Two elements with the same qualified name: {qname}", mark = { "elem1", "elem2" })
pattern TwoElementWithSameName(qname, elem1, elem2) {
	NamedElement.qualifiedName(elem1, qname);
	NamedElement.qualifiedName(elem2, qname);
	elem1 != elem2;
}

@Violation(message = "Redefinition of leaf element is not allowed", mark = { "redefining" })
pattern LeafRedefined(elem : RedefinableElement, redefining) {
	RedefinableElement.redefinedElement(redefining, elem);
	RedefinableElement.isLeaf(elem, true);
}

@Violation(message = "Extensions are not supported", mark = {
	"elem" })
pattern Extension(elem : Class) {
	Class.^extension(elem, _);
}

@Violation(message = "Only classes and operations can be abstract", mark = { "elem" })
pattern Abstract(elem : Classifier) {
	Classifier.isAbstract(elem, true);
	neg find ClassOrAssocClass(elem);
	neg find Operation(_, elem, _);
}

@Violation(message = "Final specifications are not supported", mark = {	"elem" })
pattern FinalSpecification(elem : Classifier) {
	Classifier.isFinalSpecialization(elem, true);
}

@Violation(message = "Representations are not supported", mark = {	"elem" })
pattern Representation(elem : Classifier) {
	Classifier.representation(elem, _);
}

@Violation(message = "Powertype is not supported", mark = {	"elem" })
pattern PowertypeExtent(elem : Classifier) {
	Classifier.powertypeExtent(elem, _);
}

@Violation(message = "Classifiers cannot redefine each other", mark = {	"elem" })
pattern RedefinedClassifier(elem : Classifier) {
	Classifier.redefinedClassifier(elem, _);
}

@Violation(message = "Template parameters are not supported", mark = { "elem" })
pattern TemplateParameter(elem : Classifier) {
	Classifier.templateParameter(elem, _);
}

@Violation(message = "Use cases are ignored", severity = "warning", mark = { "elem" })
pattern UseCase(elem : Classifier) {
	Classifier.useCase(elem, _);
}

