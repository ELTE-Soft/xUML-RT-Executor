package hu.eltesoft.modelexecution.validation

import "platform:/resource/org.eclipse.uml2.uml/model/UML.ecore"

import hu.eltesoft.modelexecution.uml.incquery.ClassOrAssocClass
import hu.eltesoft.modelexecution.uml.incquery.Operation
import hu.eltesoft.modelexecution.uml.incquery.NumericValue

// FIXME: reenable when qualified name is correct
//@Violation(message = "Two elements with the same qualified name: {qname}", mark = { "elem1", "elem2" })
pattern TwoElementWithSameName(qname, elem1 : NamedElement, elem2 : NamedElement) {
	NamedElement.qualifiedName(elem1, qname);
	NamedElement.qualifiedName(elem2, qname);
	elem1 != elem2;
}

@Violation(message = "Redefinition of leaf element is not allowed", mark = { "redefining" })
pattern LeafRedefined(elem : RedefinableElement, redefining : RedefinableElement) {
	RedefinableElement.redefinedElement(redefining, elem);
	RedefinableElement.isLeaf(elem, true);
}

// unsupported classifier elements

@Violation(message = "Extensions are not supported", mark = {
	"elem" })
pattern Extension(elem : Class) {
	Class.^extension(elem, _);
}

@Violation(message = "Only classes and operations can be abstract", mark = { "elem" })
pattern Abstract(elem : Classifier) {
	Classifier.isAbstract(elem, true);
	neg find ClassOrAssocClass(elem);
	neg find Operation(_, elem, _);
}

@Violation(message = "Final specifications are not supported", mark = {	"elem" })
pattern FinalSpecification(elem : Classifier) {
	Classifier.isFinalSpecialization(elem, true);
}

@Violation(message = "Representations are not supported", mark = {	"elem" })
pattern Representation(elem : Classifier) {
	Classifier.representation(elem, _);
}

@Violation(message = "Powertype is not supported", mark = {	"elem" })
pattern PowertypeExtent(elem : Classifier) {
	Classifier.powertypeExtent(elem, _);
}

@Violation(message = "Classifiers cannot redefine each other", mark = {	"elem" })
pattern RedefinedClassifier(elem : Classifier) {
	Classifier.redefinedClassifier(elem, _);
}

@Violation(message = "Template parameters are not supported", mark = { "elem" })
pattern TemplateParameter(elem : Classifier) {
	Classifier.templateParameter(elem, _);
}

@Violation(message = "Use cases are ignored", severity = "warning", mark = { "elem" })
pattern UseCase(elem : Classifier) {
	Classifier.useCase(elem, _);
}

@Violation(message = "Only sequential behaviors are supported", mark = { "beh" })
pattern ReceptionNonSequential(beh : BehavioralFeature) {
	BehavioralFeature.concurrency(beh, con);
	con != CallConcurrencyKind::sequential;
}

// multiplicity violations

@Violation(message = "High bound cannot be lower than one", mark = { "me" })
pattern HighBoundZero(me : MultiplicityElement) {
	MultiplicityElement.upperValue(me, high);
	find NumericValue(high, hv);
	check (1 > hv as Integer && hv != (-1));
}

@Violation(message = "Lower bound cannot be infinite", mark = { "me" })
pattern LowBoundInfinite(me : MultiplicityElement) {
	MultiplicityElement.lowerValue(me, low);
	find NumericValue(low, lv);
	check (-1 == lv as Integer);
}

@Violation(message = "High bound must be higher than lower bound", mark = { "me" })
pattern LowBoundHigherThanHighBound(me : MultiplicityElement) {
	MultiplicityElement.lowerValue(me, low);
	find NumericValue(low, lv);
	MultiplicityElement.upperValue(me, high);
	find NumericValue(high, hv);
	check (lv as Integer > hv as Integer && hv != (-1));
} or {
	MultiplicityElement.lowerValue(me, low);
	find NumericValue(low, lv);
	neg find HighBound(me, _);
	check (lv as Integer > 1);
}

private pattern HighBound(me : MultiplicityElement, high : ValueSpecification) {
	MultiplicityElement.upperValue(me, high);
}
