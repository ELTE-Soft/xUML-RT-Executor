package hu.eltesoft.modelexecution.validation

import "http://www.eclipse.org/uml2/5.0.0/UML"

import hu.eltesoft.modelexecution.uml.incquery.State
import hu.eltesoft.modelexecution.uml.incquery.Region
import hu.eltesoft.modelexecution.uml.incquery.Reception;

//////////////////////////////////
// state machines
///////////////////////////////////
@Violation(message = "State machine without region", mark = { "sm" })
pattern StateMachineMustHaveRegion(sm : StateMachine) {
	neg find StateMachineRegion(sm, _);
}

@Violation(message = "Multiple regions for a state machine", mark = { "rg1", "rg2" })
pattern StateMachineMustHaveOneRegion(sm : StateMachine, rg1 : Region, rg2 : Region) {
	find StateMachineRegion(sm, rg1);
	find StateMachineRegion(sm, rg2);
	rg1 != rg2;
}

private pattern StateMachineRegion(sm : StateMachine, rg : Region) {
	StateMachine.region(sm, rg);
}

@Violation(message = "State machines can only contain regions", mark = { "elem" })
pattern ForbiddenStateMachineMember(sm : StateMachine, elem) {
	StateMachine.ownedElement(sm, elem);
	neg find Region(elem);
}

@Violation(message = "State machines cannot be active", mark = { "sm" })
pattern ActiveStateMachine(sm : StateMachine) {
	StateMachine.isActive(sm, true);
}

@Violation(message = "State machines must be reentrant", mark = { "sm" })
pattern NonReentrantStateMachine(sm : StateMachine) {
	StateMachine.isReentrant(sm, false);
}

@Violation(message = "State machines must be public", mark = { "sm" })
pattern NonPublicStateMachine(sm : StateMachine) {
	StateMachine.visibility(sm, visibility);
	visibility != VisibilityKind::public;
}

@Violation(message = "State machines cannot have specification", mark = { "sm" })
pattern StateMachineWithSpecification(sm : StateMachine) {
	StateMachine.specification(sm, _);
}

@Violation(message = "State machines cannot have classifier behavior", mark = { "sm" })
pattern StateMachineWithClassifierBehavior(sm : StateMachine) {
	StateMachine.classifierBehavior(sm, _);
}

@Violation(message = "State machines cannot redefine behavior", mark = { "sm" })
pattern StateMachineRedefineBehavior(sm : StateMachine) {
	StateMachine.redefinedBehavior(sm, _);
}

@Violation(message = "State machines cannot have submachine state", mark = { "sm" })
pattern StateMachineWithSubmachineState(sm : StateMachine) {
	StateMachine.submachineState(sm, _);
}

/////////////////////////////
// regions
////////////////////////////
@Violation(message = "State machine regions must be public", mark = { "rg" })
pattern RegionNotPublic(rg : Region) {
	Region.visibility(rg, visibility);
	visibility != VisibilityKind::public;
}

@Violation(message = "State machines regions can only contain transitions and states", mark = { "elem" })
pattern ForbiddenRegionMember(rg : Region, elem) {
	Region.ownedElement(rg, elem);
	neg find State(_, elem);
	neg find Transition(elem);
	neg find InitialState(_, elem);
}

private pattern Transition(tr : Transition) {
	Transition(tr);
}

@Violation(message = "State machine regions must have an initial pseudostate", mark = { "rg" })
pattern RegionWithoutInitialState(rg : Region) {
	neg find InitialState(rg, _);
}

@Violation(message = "State machine regions cannot have multiple initial pseudostate", mark = { "init1", "init2" })
pattern MultipleInitialState(rg : Region, init1 : Pseudostate, init2 : Pseudostate) {
	find InitialState(rg, init1);
	find InitialState(rg, init2);
	init1 != init2;
}

private pattern InitialState(rg : Region, init : Pseudostate) {
	Region.subvertex(rg, init);
	Pseudostate.kind(init, ::initial);
}

///////////////////////////
// states
///////////////////////////

@Violation(message = "States must be public", mark = { "st" })
pattern StateMustBePublic(st : State) {
	State.visibility(st, visibility);
	visibility != VisibilityKind::public;
}

@Violation(message = "States cannot have an invariant", mark = { "st" })
pattern StateWithInvariant(st : State) {
	State.stateInvariant(st, _);
}

@Violation(message = "States cannot have a do activity", mark = { "st" })
pattern StateWithDoActivity(st : State) {
	State.doActivity(st, _);
}

@Violation(message = "States cannot have submachine", mark = { "st" })
pattern StateWithSubmachine(st : State) {
	State.submachine(st, _);
}

@Violation(message = "States cannot have deferrable trigger", mark = { "st" })
pattern StateWithDeferrableTrigger(st : State) {
	State.deferrableTrigger(st, _);
}

@Violation(message = "States cannot redefine another", mark = { "st" })
pattern StateRedefineAnother(st : State) {
	State.redefinedState(st, _);
}

@Violation(message = "Unreachable state", mark = { "st" })
pattern UnreachableState(st : State) {
	State.container(st, rg);
	find InitialState(rg, init);
	neg find ReachableState(init, st);
}

private pattern ReachableState(from : Vertex, to : Vertex) {
	find TransitionStep+(from, to);
}

private pattern TransitionStep(from : Vertex, to : Vertex) {
	Transition.source(tr, from);
	Transition.target(tr, to);
}

///////////////////
// initial state
///////////////////
@Violation(message = "Initial pseudostate must be public", mark = { "ps" })
pattern InitialPseudostateNotPublic(ps : Pseudostate) {
	Pseudostate.visibility(ps, visibility);
	visibility != VisibilityKind::public;
}

@Violation(message = "No transition from an initial pseudostate", mark = { "src" })
pattern NoInitialTransition(src : Pseudostate) {
	find InitialState(_, src);
	neg find InitialTransition(src, _);
}

@Violation(message = "Multiple initial transitions from an initial pseudostate", mark = { "tr1", "tr2" })
pattern MultipleInitialTransitions(src : Pseudostate, tr1 : Transition, tr2 : Transition) {
	find InitialState(_, src);
	find InitialTransition(src, tr1);
	find InitialTransition(src, tr2);
	tr1 != tr2;
}

@Violation(message = "The initial transition must not have a trigger", mark = { "tr" })
pattern InitialTransitionWithTrigger(tr : Transition) {
	find InitialTransition(_, tr);
	Transition.trigger(tr, _);
}

private pattern InitialTransition(src : Pseudostate, tr : Transition) {
	find InitialState(_, src);
	Transition.source(tr, src);
}

//////////////////
// final states
//////////////////
@Violation(message = "Final states cannot have entry action", mark = { "st" })
pattern FinalStateWithEntryAction(st : FinalState) {
	FinalState.entry(st, _);
}

@Violation(message = "Final states cannot have exit action", mark = { "st" })
pattern FinalStateWithExitAction(st : FinalState) {
	FinalState.exit(st, _);
}

//////////////////
// transitions
//////////////////
@Violation(message = "The source of the transition is an initial pseudostate or a state", mark = { "tr" })
pattern TransitionSourceUnknown(tr : Transition) {
	neg find TransitionSource(tr, _);
}

private pattern TransitionSource(tr : Transition, src : Vertex) {
	Transition.source(tr, src);
	State(src);
} or {
	Transition.source(tr, src);
	Pseudostate.kind(src, ::initial);
}

@Violation(message = "Multiple transitions from a single state with a single event are not supported", mark = { "src" })
pattern MultipleTransitionsWithAnEvent(tr1 : Transition, tr2 : Transition, src : State, ev : Event) {
	Transition.source(tr1, src);
	find TransitionEvent(tr1, ev);
	Transition.source(tr2, src);
	find TransitionEvent(tr2, ev);
	tr1 != tr2;
}


@Violation(message = "The target of the transition is an initial pseudostate or a state", mark = { "tr" })
pattern TransitionTargetUnknown(tr : Transition) {
	neg find TransitionTarget(tr, _);
}

private pattern TransitionTarget(tr : Transition, trg : Vertex) {
	Transition.target(tr, trg);
	State(trg);
}


@Violation(message = "Transitions between normal states must have a trigger with an event", mark = { "tr" })
pattern TransitionWithoutEvent(tr : Transition) {
	Transition.source(tr, src);
	State(src);
	neg find TransitionEvent(tr, _);
}

@Violation(message = "Class {cl} must contain the reception for {sg}", mark = { "tr" })
pattern EventWithoutReception(tr : Transition, cl : Class, sg : Signal) {
	Transition.container(tr, rg);
	Region.stateMachine(rg, sm);
	Class.classifierBehavior(cl, sm);
	find TransitionEvent(tr, ev);
	SignalEvent.signal(ev, sg);
	neg find Reception(cl, _, sg);
}

private pattern TransitionEvent(tr : Transition, ev : Event) {
	Transition.trigger(tr, tg);
	Trigger.event(tg, ev);
}

@Violation(message = "Transitions must be public", mark = { "tr" })
pattern TransitionNotPublic(tr : Transition) {
	Transition.visibility(tr, visibility);
	visibility != VisibilityKind::public;
}

@Violation(message = "Transitions must be external", mark = { "tr" })
pattern NonExternalTransition(tr : Transition) {
	Transition.kind(tr, k);
	k != TransitionKind::external;
}

@Violation(message = "Transitions cannot have guards", mark = { "tr" })
pattern TransitionWithGuard(tr : Transition) {
	Transition.guard(tr, _);
}

@Violation(message = "Transitions cannot redefine another", mark = { "tr" })
pattern TransitionRedefinesAnother(tr : Transition) {
	Transition.redefinedTransition(tr, _);
}
